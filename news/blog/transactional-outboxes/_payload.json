[{"data":1,"prerenderedAt":681},["ShallowReactive",2],{"6E50DYJQtf":3},{"pageSetup":4,"sections":15},{"slug":5,"description":8,"keywords":9,"image":10,"title":14},{"_type":6,"current":7},"slug","transactional-outboxes","Clear Street is a cloud-native financial technology firm on a mission to modernize the brokerage ecosystem.",null,{"url":11,"width":12,"height":13},"https://cdn.sanity.io/images/40fnhjbe/production/75d5fb413f6dcac4073b609abb6015bc07f98368-3840x2160.png",3840,2160,"Designing Clear Street's First Transactional Outbox Pattern",{"header":16,"content":46,"footer":592},{"category":17,"title":14,"date":20,"summary":8,"author":21,"hello":45},{"name":18,"colorSlug":19},"Engineering","engineering","2020-10-01",{"_id":22,"name":23,"_createdAt":24,"_updatedAt":25,"role":26,"_type":27,"slug":28,"_rev":30,"photo":31},"FY3Umrpkptjq2bXyZZikQy","Sachin Kumar","2024-02-16T14:38:42Z","2024-05-29T14:57:35Z","Co-Founder & Chief Technology Officer","authors",{"current":29,"_type":6},"sachin-kumar","uvHohaOYLPGOvQZnPU1Dth",{"asset":32,"url":35,"width":36,"height":37,"extension":38,"alt":9,"hotspot":39},{"_ref":33,"_type":34},"image-93f1762f41b2343c99ef9482219b306ea30400a4-3000x4500-jpg","reference","https://cdn.sanity.io/images/40fnhjbe/production/93f1762f41b2343c99ef9482219b306ea30400a4-3000x4500.jpg",3000,4500,"jpg",{"y":40,"height":41,"_type":42,"width":43,"x":44},0.3381666882324217,0.6159776684570311,"sanity.imageHotspot",0.9043872070312501,0.5475150553385417,"world",{"legalText":47,"form":90,"type":119,"readingTime":120,"body":121,"references":565,"pressReleasesFootNote":566},[48,82],{"markDefs":49,"children":57,"_type":79,"style":80,"_key":81},[50,54],{"_type":51,"href":52,"_key":53},"link","https://brokercheck.finra.org/firm/summary/288933","10659f16c05f",{"_key":55,"_type":51,"href":56},"3c111ef5e988","https://www.nfa.futures.org/BasicNet/basic-profile.aspx?nfaid=XCoGScQYyvw%3D",[58,63,67,71,75],{"text":59,"_key":60,"_type":61,"marks":62},"Clear Street does not provide investment, legal, regulatory, tax, or compliance advice. Consult professionals in these fields to address your specific circumstances. These materials are: (i) solely an overview of Clear Street‚Äôs products and services; (ii) provided for informational purposes only; and (iii) subject to change without notice or obligation to replace any information contained therein.\n\nProducts and services are offered by Clear Street LLC as a Broker Dealer member FINRA and SIPC and a Futures Commission Merchant registered with the CFTC and member of NFA. Additional information about Clear Street is available on FINRA ","e217f565c4110","span",[],{"marks":64,"text":65,"_key":66,"_type":61},[53],"BrokerCheck","e217f565c4111",{"_type":61,"marks":68,"text":69,"_key":70},[],", including its Customer Relationship Summary and NFA ","e217f565c4112",{"_type":61,"marks":72,"text":73,"_key":74},[55],"BASIC | NFA (futures.org)","e217f565c4113",{"_type":61,"marks":76,"text":77,"_key":78},[],".\n‚Äç\nCopyright ¬© 2024 Clear Street LLC. All rights reserved. Clear Street and the Shield Logo are Registered Trademarks of Clear Street LLC\n","e217f565c4114","block","normal","cd3115128082",{"_key":83,"markDefs":84,"children":85,"_type":79,"style":80},"38805a72b34d",[],[86],{"marks":87,"text":88,"_key":89,"_type":61},[],"\n","a19adde9170f0",{"title":91,"slug":92,"fields":93},"Contact","contact",[94,100,105,110,114],{"_type":95,"name":96,"label":97,"required":98,"errorMessage":99},"field.string","full-name","Full name",true,"Please add your full name",{"_type":101,"name":102,"label":103,"required":98,"errorMessage":104},"field.email","work-email","Work email","Invalid email",{"name":106,"label":107,"required":98,"errorMessage":108,"_type":109},"work-phone","Work phone","Please add your work phone","field.phone",{"required":98,"errorMessage":111,"_type":95,"name":112,"label":113},"Please add your company","company","Company",{"name":115,"label":116,"required":117,"errorMessage":9,"_type":118},"message","Message (optional)",false,"field.text","blog",7,[122,140,148,156,163,171,178,186,196,204,211,230,238,279,286,294,300,308,315,323,331,339,346,354,361,380,387,397,416,435,439,447,454,462,470,500,507,515,522,530,534,542,550,557],{"alt":123,"caption":124,"asset":132,"children":9,"extension":134,"url":135,"height":136,"_type":137,"_key":138,"hotspot":9,"width":139},"Alt",[125],{"_type":79,"style":80,"_key":126,"markDefs":127,"children":128},"ba9c661f9d7d",[],[129],{"_key":130,"_type":61,"marks":131,"text":123},"cdd2717dccda",[],{"_ref":133,"_type":34},"image-de2bc21ec2862277e8860ee37f57f02d79158cf3-1400x933-png","png","https://cdn.sanity.io/images/40fnhjbe/production/de2bc21ec2862277e8860ee37f57f02d79158cf3-1400x933.png",933,"figureNews","e819dcb4f38d",1400,{"style":80,"_key":141,"markDefs":142,"children":143,"_type":79},"a436e934460c",[],[144],{"text":145,"_key":146,"_type":61,"marks":147},"","a436e934460c0",[],{"_type":79,"style":80,"_key":149,"markDefs":150,"children":151},"a6237d33d2c9",[],[152],{"_type":61,"marks":153,"text":154,"_key":155},[],"In this post, we discuss how Clear Street designed its first version of a transactional outbox pattern on top of change data capture with Debezium. In subsequent posts, we‚Äôll discuss problems we encountered with our initial design and how we are thinking about changing it over time. If you‚Äôre interested in distributed system patterns, such as transactional outboxes, you might find the journey we had interesting.","a6237d33d2c90",{"children":157,"_type":79,"style":80,"_key":161,"markDefs":162},[158],{"marks":159,"text":145,"_key":160,"_type":61},[],"634820c47ba00","634820c47ba0",[],{"markDefs":164,"children":165,"_type":79,"style":80,"_key":170},[],[166],{"_key":167,"_type":61,"marks":168,"text":169},"d91b1538f84a0",[],"Also, it‚Äôs our first engineering blog post! üéâ","d91b1538f84a",{"_type":79,"style":80,"_key":172,"markDefs":173,"children":174},"d30b77c1a0cb",[],[175],{"_type":61,"marks":176,"text":145,"_key":177},[],"d30b77c1a0cb0",{"_type":79,"style":80,"_key":179,"markDefs":180,"children":181},"0b85fd8f0882",[],[182],{"_type":61,"marks":183,"text":184,"_key":185},[],"Back in 2018 when we started Clear Street, we knew that we wanted our microservices to expose two types of APIs, one RESTful gRPC API for CRUD-related operations, and the other, a streaming API with Kafka that captures those CRUD operations. The streaming API is important because it allows downstream services to avoid polling for updates, and instead be simply notified via Kafka with the details of the updates.","0b85fd8f08820",{"_type":79,"style":187,"_key":188,"markDefs":189,"children":190},"h5","3d64e2025214",[],[191],{"_type":61,"marks":192,"text":194,"_key":195},[193],"strong","Side Effects","3d64e20252140",{"markDefs":197,"children":198,"_type":79,"style":80,"_key":203},[],[199],{"_type":61,"marks":200,"text":201,"_key":202},[],"Implementing a streaming API has a vexing challenge, specifically when your CRUD operations are done within a PostgreSQL transaction. The question becomes: How do you guarantee that what gets published to Kafka won‚Äôt be inconsistent with the database in the event of failures?","97341e4e9a5d0","97341e4e9a5d",{"markDefs":205,"children":206,"_type":79,"style":80,"_key":210},[],[207],{"_type":61,"marks":208,"text":145,"_key":209},[],"575e7025a6c30","575e7025a6c3",{"_type":79,"style":80,"_key":212,"markDefs":213,"children":217},"d975f7a89ce7",[214],{"_type":51,"to":215,"_key":216},"https://www.baeldung.com/transactions-across-microservices","b6e4b1768b9b",[218,222,226],{"_type":61,"marks":219,"text":220,"_key":221},[],"This is a classic case of dealing with a side effect as part of a database transaction. In this case, the side effect is publishing to Kafka. Using a two-phase commit (2PC), in principle, this would solve this problem, but our view is that 2PC is known to be ","d975f7a89ce70",{"_key":223,"_type":61,"marks":224,"text":225},"d975f7a89ce71",[216],"slow and, frankly, complicated to implement",{"_type":61,"marks":227,"text":228,"_key":229},[],".","d975f7a89ce72",{"children":231,"_type":79,"style":187,"_key":236,"markDefs":237},[232],{"_type":61,"marks":233,"text":234,"_key":235},[193],"Listen for Changes at the DB","5d246d9459940","5d246d945994",[],{"children":239,"_type":79,"style":80,"_key":271,"markDefs":272},[240,244,249,253,258,262,267],{"_type":61,"marks":241,"text":242,"_key":243},[],"We opted to use ","a1dd50bdcdc90",{"_type":61,"marks":245,"text":247,"_key":248},[246],"99328fc33103","Debezium","a1dd50bdcdc91",{"_type":61,"marks":250,"text":251,"_key":252},[]," to solve the problem of publishing events onto Kafka as a side effect of a database transaction. Debezium is a ","a1dd50bdcdc92",{"_type":61,"marks":254,"text":256,"_key":257},[255],"3981fca96445","Kafka Connector","a1dd50bdcdc93",{"_type":61,"marks":259,"text":260,"_key":261},[]," that listens for changes in the database via ","a1dd50bdcdc94",{"marks":263,"text":265,"_key":266,"_type":61},[264],"321003e8b57c","PostgreSQL‚Äôs write-ahead-log","a1dd50bdcdc95",{"_type":61,"marks":268,"text":269,"_key":270},[],", and then publishes those changes onto Kafka, without having to worry about failure scenarios. In other words, if your database transaction successfully commits to the database, you are guaranteed that a corresponding event with the details of what you changed are published to Kafka at-least once.","a1dd50bdcdc96","a1dd50bdcdc9",[273,275,277],{"_key":246,"_type":51,"to":274},"https://debezium.io/",{"_type":51,"to":276,"_key":255},"https://docs.confluent.io/current/connect/managing/index.html",{"_type":51,"to":278,"_key":264},"https://www.postgresql.org/docs/12/wal-intro.html",{"children":280,"_type":79,"style":80,"_key":284,"markDefs":285},[281],{"_type":61,"marks":282,"text":145,"_key":283},[],"0a146661ded1","72843bc08f92",[],{"children":287,"_type":79,"style":80,"_key":292,"markDefs":293},[288],{"_type":61,"marks":289,"text":290,"_key":291},[],"Using Debezium v0.9.5, here‚Äôs an example of what gets published automatically onto Kafka after inserting a row into a table called events that has the columns id, created_at, column_a, column_b in schema bar , in database foo, in PostgresSQL:","96f43161835f0","96f43161835f",[],{"code":295,"_type":298,"_key":299},{"code":296,"_type":297},"\"payLoad\":{\n  \"before\": null,\n  \"after\": {\n    \"id\": 1,\n    \"created_at\": \"2020-09-27T13:37:24.0584682\",\n    \"column_a\": \"a\",\n    \"column_b\": \"b\"\n  },\n  \"source\": {\n    \"version\": \"0.9.5. Final\",\n    \"connector\": \"postgresql\",\n    \"name\": \"foo\",\n    \"db\": \"foo\",\n    \"ts_usec\": 1601213844074632,\n    \"txId\": 644,\n    \"Isn*: 28581784,\n    \"schema\": \"bar\",\n    \"table\": \"events\",\n    \"snapshot\": false,\n    \"last_snapshot_record\": null,\n    \"xmin\":null\n  },\n  \"–æ—Ä\":\"—Å\",\n  \"ts_ms\":1601213844598\n}","code","codeBlock","8878f47b7354",{"_type":79,"style":80,"_key":301,"markDefs":302,"children":303},"d8f2f1e4ccbf",[],[304],{"_type":61,"marks":305,"text":306,"_key":307},[],"This message, assuming default Debezium configuration, will get published on Kafka topic foo.bar.events on partition 0. Note that the payload object has before and after which reflect the state of the row before the change and after, respectively. In this case, since we inserted a new row, there is no prior state.","d8f2f1e4ccbf0",{"style":80,"_key":309,"markDefs":310,"children":311,"_type":79},"af6ea4cfade3",[],[312],{"_type":61,"marks":313,"text":145,"_key":314},[],"af6ea4cfade30",{"markDefs":316,"children":317,"_type":79,"style":80,"_key":322},[],[318],{"_type":61,"marks":319,"text":320,"_key":321},[],"Debezium is smart enough to understand your PostgresSQL schema so that changes that occur on a particular row can be converted into a JSON object. Therefore, your database models are automatically converted into JSON and published directly onto Kafka without any additional work on your part.","2740573682230","274057368223",{"markDefs":324,"children":325,"_type":79,"style":187,"_key":330},[],[326],{"marks":327,"text":328,"_key":329,"_type":61},[193],"Avoiding Leaky Abstractions","2e8ca57741be0","2e8ca57741be",{"style":80,"_key":332,"markDefs":333,"children":334,"_type":79},"fea705e10f7b",[],[335],{"_type":61,"marks":336,"text":337,"_key":338},[],"While we liked the ability for Debezium to solve our side effect problem, we didn‚Äôt like how a service‚Äôs internal data models were exposed directly onto Kafka. This presented a glaring hole in our design philosophy that a service‚Äôs persistent storage is private to that service and should not be leaked. Leaking this information breaks encapsulation, and tightly couples our database models to our streaming API.","fea705e10f7b0",{"markDefs":340,"children":341,"_type":79,"style":80,"_key":345},[],[342],{"text":145,"_key":343,"_type":61,"marks":344},"7729980e500d0",[],"7729980e500d",{"_key":347,"markDefs":348,"children":349,"_type":79,"style":80},"69c2a0dcf318",[],[350],{"_type":61,"marks":351,"text":352,"_key":353},[],"We needed a layer of abstraction on the raw message Debezium actually publishes to Kafka. We decided that a service author should be more explicit in controlling when a message is published and what specific fields are in that message.","69c2a0dcf3180",{"markDefs":355,"children":356,"_type":79,"style":80,"_key":360},[],[357],{"_key":358,"_type":61,"marks":359,"text":145},"d87c8adb50390",[],"d87c8adb5039",{"children":362,"_type":79,"style":80,"_key":376,"markDefs":377},[363,367,372],{"_type":61,"marks":364,"text":365,"_key":366},[],"To do this, we implemented a ","763a5a8f2e870",{"_key":368,"_type":61,"marks":369,"text":371},"763a5a8f2e871",[370],"568b932ace66","transactional outbox pattern",{"_type":61,"marks":373,"text":374,"_key":375},[]," as follows:","763a5a8f2e872","763a5a8f2e87",[378],{"_type":51,"to":379,"_key":370},"https://microservices.io/patterns/data/transactional-outbox.html",{"_type":79,"style":80,"_key":381,"markDefs":382,"children":383},"0fc7755855ba",[],[384],{"text":145,"_key":385,"_type":61,"marks":386},"0fc7755855ba0",[],{"markDefs":388,"children":389,"level":394,"_type":79,"style":80,"_key":395,"listItem":396},[],[390],{"text":391,"_key":392,"_type":61,"marks":393},"We configured Debezium to only listen for changes on PostgresSQL tables that have the suffix events . We did this via Debezium‚Äôs table.whitelist configuration.","31c15c1136b90",[],1,"31c15c1136b9","bullet",{"level":394,"_type":79,"style":80,"_key":398,"listItem":396,"markDefs":399,"children":403},"fcd1fdfcc754",[400],{"_type":51,"to":401,"_key":402},"https://www.confluent.io/blog/avro-kafka-data/","456d2c7e1391",[404,408,412],{"_type":61,"marks":405,"text":406,"_key":407},[],"We decided that any event published from Debezium to Kafka must be encoded as an Avro message. ","fcd1fdfcc7540",{"_type":61,"marks":409,"text":410,"_key":411},[402],"Avro is a first-class citizen in the Kafka ecosystem","fcd1fdfcc7541",{"_type":61,"marks":413,"text":414,"_key":415},[],", so all our Kafka messages are encoded in Avro.","fcd1fdfcc7542",{"listItem":396,"markDefs":417,"children":421,"level":394,"_type":79,"style":80,"_key":434},[418],{"_type":51,"to":419,"_key":420},"https://docs.confluent.io/current/schema-registry/index.html","aa79b24ca5b9",[422,426,430],{"_type":61,"marks":423,"text":424,"_key":425},[],"Since we decided all our events should be Avro messages, the service author needs to construct an Avro message with the appropriate information that captures the change being made. The service author then commits the resulting message into the events table, along with the schema-id that is part of the ","8a804a20d9a00",{"marks":427,"text":428,"_key":429,"_type":61},[420],"Confluent‚Äôs Schema-Registry","8a804a20d9a01",{"marks":431,"text":432,"_key":433,"_type":61},[],". This means any table suffixed with events, by convention, follows this schema:","8a804a20d9a02","8a804a20d9a0",{"_type":298,"_key":436,"code":437},"fa93d0621ac3",{"code":438,"_type":297},"--postgres events table\nCREATE TABLE myservice-events (\n  id bigserial NOT NULL,\n  created_at timestamptz NOT NULL DEFAULT now(), \n  schema_id int4 NDT NULL, \n  partition int4 DEFAULT 0, \n  data bytea NOT NULL, \n  CONSTRAINT events_pk PRIMARY KEY (id)\n);",{"markDefs":440,"children":441,"_type":79,"style":80,"_key":446},[],[442],{"_type":61,"marks":443,"text":444,"_key":445},[],"The important fields in the schema above are schema_id , partition , and data . The data is the binary Avro encoding of the message, while schema_id is Confluent‚Äôs schema-registry‚Äôs unique ID that gives you the schema of how data is encoded. Finally, partition is used to control which Kafka partition to publish data on.","654a9fd70a4b0","654a9fd70a4b",{"_key":448,"markDefs":449,"children":450,"_type":79,"style":80},"0d8f6ee2aa91",[],[451],{"_type":61,"marks":452,"text":145,"_key":453},[],"0d8f6ee2aa910",{"_type":79,"style":80,"_key":455,"markDefs":456,"children":457},"3a47e3f25b0d",[],[458],{"_type":61,"marks":459,"text":460,"_key":461},[],"With the above conventions, our event tables function as a transactional outbox where inserted rows can be picked up by Debezium, unwrapped and routed to Kafka.","3a47e3f25b0d0",{"_type":79,"style":187,"_key":463,"markDefs":464,"children":465},"dbe1d5a1f353",[],[466],{"_type":61,"marks":467,"text":468,"_key":469},[193],"Unwrap & Route","dbe1d5a1f3530",{"_type":79,"style":80,"_key":471,"markDefs":472,"children":479},"69725d66cb87",[473,476],{"_type":51,"to":474,"_key":475},"https://gist.github.com/sachnk/b35f1a162337fca013f888ac9ee2424d","0a2953abb5e3",{"_type":51,"to":477,"_key":478},"https://gist.github.com/sachnk/dc37790412e9ab4d79a8b3a9f958390f","ea54b8d1ad79",[480,484,488,492,496],{"_type":61,"marks":481,"text":482,"_key":483},[],"Since Debezium is a Kafka Connector, we can configure it to use custom transformers. We created such transformers that we call ","69725d66cb870",{"_type":61,"marks":485,"text":486,"_key":487},[475],"EventConverter","69725d66cb871",{"_type":61,"marks":489,"text":490,"_key":491},[],", and ","69725d66cb872",{"_type":61,"marks":493,"text":494,"_key":495},[478],"EventRouter","69725d66cb873",{"_type":61,"marks":497,"text":498,"_key":499},[],". The goal of these transformers is to unpack insertions made into the events table, pull out the Avro encoded message, and publish to Kafka on the right partition.","69725d66cb874",{"markDefs":501,"children":502,"_type":79,"style":80,"_key":506},[],[503],{"marks":504,"text":145,"_key":505,"_type":61},[],"1d5430da2ae90","1d5430da2ae9",{"_type":79,"style":80,"_key":508,"markDefs":509,"children":510},"8e625aaa6930",[],[511],{"_type":61,"marks":512,"text":513,"_key":514},[],"In a Dockerfile, we extended confluentinc/cp-kafka-connect:5.1.0 , added Debezium v0.9.5, and also added our own JAR files that contain both the EventConverter and EventRouter.","8e625aaa69300",{"markDefs":516,"children":517,"_type":79,"style":80,"_key":521},[],[518],{"_key":519,"_type":61,"marks":520,"text":145},"005e5d30c56a0",[],"005e5d30c56a",{"_key":523,"markDefs":524,"children":525,"_type":79,"style":80},"d5959973e1a1",[],[526],{"_type":61,"marks":527,"text":528,"_key":529},[],"We then stitched it all together by adding the following to our Debezium configuration, where \u003Cregistry-url> is the URL for our Confluent Schema Registry:","d5959973e1a10",{"code":531,"_type":298,"_key":533},{"code":532,"_type":297},"{\n  \"key. converter\": \"io.confluent.connect.avro.AvroConverter\",\n  \"key. converter.schema.registry.url\": \u003Cregistry-url>,\n  \"value. converter\": \"io. clearstreet.debezium.EventConverter\",\n  \"value.converter.schema.registry.url\": \u003Cregistry-url>,\n\n  \"transforms\": \"router, unwrap\",\n  \"transforms. router.type\": \"io. clearstreet.debezium.EventRouter\",\n  \"transforms.unwrap.type\":\"io.debezium.transforms.UnwrapFromEnvelope\",\n  \"transforms.unwrap.drop.tombstones\": true,\n\n  \"table.whitelist\": \".*(events)$\",\n\"header.converter\":\"org.apache.kafka.connect.storage.SimpleHeaderConverter\",\n  \"schema.registry.url\": \u003Cregistry-url>,\n}","d99e07371bb8",{"_type":79,"style":187,"_key":535,"markDefs":536,"children":537},"8b1af666c204",[],[538],{"_type":61,"marks":539,"text":540,"_key":541},[193],"Limitations and Retrospective","8b1af666c2040",{"children":543,"_type":79,"style":80,"_key":548,"markDefs":549},[544],{"_type":61,"marks":545,"text":546,"_key":547},[],"What we described above is the transactional outbox pattern we implemented back in 2018. We‚Äôve been using this pattern in production for about two years now. Much of the machinery we had to customize dealt with our desire to ensure our streaming API was loosely coupled with the database, and therefore required Avro encoding/decoding within the Debezium path.","f39024aac8ce0","f39024aac8ce",[],{"children":551,"_type":79,"style":80,"_key":555,"markDefs":556},[552],{"text":145,"_key":553,"_type":61,"marks":554},"90cba2f1c7c80",[],"90cba2f1c7c8",[],{"style":80,"_key":558,"markDefs":559,"children":560,"_type":79},"9b5967019b3a",[],[561],{"text":562,"_key":563,"_type":61,"marks":564},"All that said, it unfortunately hasn‚Äôt been all rainbows and sunshine. In the next part of this post, coming in the next few weeks, we‚Äôll talk about some of the problems we ran into and how we‚Äôre handling them.","9b5967019b3a0",[],[],[567,575],{"markDefs":568,"children":569,"_type":79,"style":80,"_key":574},[],[570],{"_type":61,"marks":571,"text":572,"_key":573},[193],"About Clear Street:","820e76cb468a0","01d9743bd6e6",{"children":576,"_type":79,"style":80,"_key":589,"markDefs":590},[577,581,586],{"text":578,"_key":579,"_type":61,"marks":580},"Clear Street is modernizing the brokerage ecosystem with financial technology and services that empower market participants with real-time data and best-in-class products, tools and teams, to navigate capital markets around the world. Complemented by white-glove service, Clear Street's cloud-native, proprietary product suite delivers financing, derivatives, execution and more to power client success, adding efficiency to the market and enabling clients to minimize risk, redundancy and cost. Clear Street‚Äôs goal is to create a single platform for every asset class, in every country and in any currency. For more information, visit ","46cc6bc340df0",[],{"_type":61,"marks":582,"text":584,"_key":585},[583],"f69e401d33e9","https://clearstreet.io","46cc6bc340df1",{"_type":61,"marks":587,"text":228,"_key":588},[],"46cc6bc340df2","6558fb161935",[591],{"_type":51,"href":584,"_key":583},{"address":593,"disclaimer":594,"footerItems":621,"legalItems":653,"legalText":9,"socialNetworks":663},"4 World Trade Center\n150 Greenwich St Floor 45\nNew York, NY 10007\n(646) 845-0036",[595,605],{"style":80,"_key":596,"markDefs":597,"children":600,"_type":79},"b41b74ae73bb",[598],{"_type":51,"href":52,"_key":599},"d38625939708",[601],{"_type":61,"marks":602,"text":603,"_key":604},[],"Products and services are offered by Clear Street LLC as a Broker Dealer member FINRA and SIPC and a Futures Commission Merchant registered with the CFTC and member of NFA. ","331699fdb6140",{"style":80,"_key":606,"markDefs":607,"children":609,"_type":79},"dbec5081eda7",[608],{"href":52,"_key":599,"_type":51},[610,614,617],{"_type":61,"marks":611,"text":612,"_key":613},[],"Additional information about Clear Street is available on FINRA ","42e587e4d749",{"_type":61,"marks":615,"text":65,"_key":616},[599],"4894062c01ca",{"_type":61,"marks":618,"text":619,"_key":620},[],", including its Customer Relationship Summary and NFA BASIC | NFA (futures.org).","6db9006e1b4a",[622,635,647],{"title":113,"pages":623},[624,628,631,634],{"type":625,"title":626,"slug":627},"internal","About","about",{"type":625,"title":629,"slug":630},"News & Content","news",{"type":625,"title":632,"slug":633},"Careers","careers",{"type":625,"title":91,"slug":92},{"title":636,"pages":637},"Services",[638,641,644],{"type":625,"title":639,"slug":640},"Institutional","institutional",{"type":625,"title":642,"slug":643},"Professional Clearing","professional-clearing",{"type":625,"title":645,"slug":646},"Active Trader","active-trader",{"title":648,"pages":649},"Products",[650],{"type":625,"title":651,"slug":652},"Studio","studio",[654,657,660],{"title":655,"slug":656},"Regulatory Disclosures","regulatory-disclosures",{"title":658,"slug":659},"Privacy Policy","privacy-policy",{"title":661,"slug":662},"Security","security",[664,669,673,677],{"_type":665,"link":666,"socialNetwork":667,"_key":668},"links","https://github.com/clear-street","github","466192507eea",{"_type":665,"link":670,"socialNetwork":671,"_key":672},"https://www.linkedin.com/company/clear-street","linkedin","43f9fa8f49d0",{"_key":674,"_type":665,"link":675,"socialNetwork":676},"b581a744d770","https://www.youtube.com/@ClearStreetNYC","youtube",{"_type":665,"link":678,"socialNetwork":679,"_key":680},"https://open.spotify.com/show/3Bbl6x17ZSdnijTTDq6tKi","spotify","7625c0ffc2b2",1733511759552]